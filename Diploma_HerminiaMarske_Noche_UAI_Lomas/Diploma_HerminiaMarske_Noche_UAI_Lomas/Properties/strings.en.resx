<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="client_created_person_created" xml:space="preserve">
    <value>The client was completely created.</value>
  </data>
  <data name="error" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="error_deleting_user" xml:space="preserve">
    <value>There was an error while processing the user deletion</value>
  </data>
  <data name="error_modifying_user" xml:space="preserve">
    <value>There was an error while processing the user modification.</value>
  </data>
  <data name="failure" xml:space="preserve">
    <value>Failure</value>
  </data>
  <data name="message" xml:space="preserve">
    <value>Message</value>
  </data>
  <data name="missing_info" xml:space="preserve">
    <value>Some of the required fields are empty.</value>
  </data>
  <data name="missing_user_data" xml:space="preserve">
    <value>Please provide all the required fields.</value>
  </data>
  <data name="no_addresses" xml:space="preserve">
    <value>The person doesn't have any addresses.</value>
  </data>
  <data name="no_mails" xml:space="preserve">
    <value>The person doesn't have any mails</value>
  </data>
  <data name="no_phones" xml:space="preserve">
    <value>The person doesn't have any phones</value>
  </data>
  <data name="no_profiles_nor_roles" xml:space="preserve">
    <value>The user doesn't have any profiles nor roles granted.</value>
  </data>
  <data name="ok" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="passwords_dont_match" xml:space="preserve">
    <value>Passwords don't match.</value>
  </data>
  <data name="password_too_short" xml:space="preserve">
    <value>Password must be at least 6 characters long.</value>
  </data>
  <data name="person_has_user" xml:space="preserve">
    <value>The person already haves an user.</value>
  </data>
  <data name="success" xml:space="preserve">
    <value>Success</value>
  </data>
  <data name="user_auth_error" xml:space="preserve">
    <value>There is a problem with your password and couldn't be processed
Please contact an administrator</value>
  </data>
  <data name="user_auth_failed" xml:space="preserve">
    <value>Incorrect password!</value>
  </data>
  <data name="user_blocked" xml:space="preserve">
    <value>This user is blocked
Please contact an administrator.</value>
  </data>
  <data name="user_created_existing_person" xml:space="preserve">
    <value>User created for existing person.</value>
  </data>
  <data name="user_created_person_created" xml:space="preserve">
    <value>The user and the person were created.</value>
  </data>
  <data name="user_deleted" xml:space="preserve">
    <value>User deleted successfully.</value>
  </data>
  <data name="user_exists" xml:space="preserve">
    <value>This user already exists.</value>
  </data>
  <data name="user_modified" xml:space="preserve">
    <value>User modified successfully.</value>
  </data>
  <data name="user_not_exists" xml:space="preserve">
    <value>The user does not exist.</value>
  </data>
  <data name="welcome" xml:space="preserve">
    <value>Welcome {0}!</value>
  </data>
</root>